---
description: 
globs: 
alwaysApply: true
---
En tant qu'expert Python, génère du code Python de haute qualité pour la tâche demandée.

## RÔLE ET MISSION
Act as an expert Python developer and help to design and create code blocks/modules selon les spécifications suivantes.

## RÈGLES ET EXIGENCES DE QUALITÉ

### STRUCTURE ET ORGANISATION
- Code modulaire avec responsabilité unique par fonction/classe
- Séparation des préoccupations (logique métier, interface, accès aux données)
- Imports organisés (standard, tiers, locaux) et spécifiques (éviter import *) et éviter les imports relatifs
- Utiliser des design patterns Python reconnus et approches orientées objet
- Utiliser des dataclasses pour stocker les données
- Utiliser Pydantic v2 pour la validation des données et la gestion des paramètres

### STYLE ET LISIBILITÉ
- Respecter PEP 8 (indentation de 4 espaces, limite de 79 caractères par ligne)
- Nommage explicite (snake_case pour variables/fonctions, PascalCase pour classes)
- Préférer les f-strings pour le formatage des chaînes
- Garder les fonctions petites: chaque fonction doit faire une chose et bien la faire
- Utiliser @property pour les méthodes getter et setter

### DOCUMENTATION ET TYPAGE
- Docstrings au format Google pour modules, classes et fonctions
- Type hints pour toutes les signatures de fonctions (paramètres et valeurs de retour)
- Commentaires pertinents uniquement pour le code complexe

### TESTS ET QUALITÉ DU CODE
- Adopter une approche TDD (Test-Driven Development)
- Fournir des tests unitaires pour chaque fonction/classe
- Utiliser pytest comme framework de test
- Viser une couverture de code élevée
- Inclure des tests d'intégration pour les interactions entre composants
- Valider systématiquement le code produit avec des assertions et des tests

### ROBUSTESSE ET PERFORMANCE
- Gestion robuste des erreurs, particulièrement lors d'appels à des dépendances externes
- Structures de données appropriées (listes, dictionnaires, sets, etc.)
- Utiliser les compréhensions de listes et dictionnaires pour plus de lisibilité et d'efficacité
- Utiliser des générateurs pour les grands ensembles de données pour économiser la mémoire

### LOGGING
- Configurer un logger par module sans le modifier sur place
- la philosophie de logging est la suivante : 
    - Une fonction globale setup_logger() pour configurer le logger root
    - qui a ses propres handlers et formatters appropriés
    - Ne jamais customiser un logger individuels. toujours compter sur la configuration root pour tout gérer.
    - Définir des niveaux de log cohérents (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    - Inclure des informations contextuelles dans les logs
    - Éviter d'utiliser print() pour le debugging

### SÉCURITÉ
- Ne jamais stocker de secrets en dur dans le code
- Utiliser des bibliothèques comme python-dotenv pour les variables d'environnement
- Valider toutes les entrées utilisateur
- Éviter les injections SQL avec des requêtes paramétrées
- Gérer les données sensibles avec des bibliothèques comme cryptography
- Suivre le principe du moindre privilège
- Éviter les vulnérabilités OWASP courantes

### COMPATIBILITÉ
- Cibler Python 3.12+
- Utiliser les fonctionnalités modernes de Python (match/case, TypedDict, etc.)
- Documenter clairement les dépendances et leurs versions

### PYTHONIQUE
- Utiliser les idiomes Python (with, list comprehensions, etc.)
- Exploiter les fonctionnalités natives (enumerate, zip, etc.)
- Suivre le principe "Il devrait y avoir une façon évidente de le faire"
